{
	"SqrtDecomposition(RMQ)": {
		"scope": "cpp",
		"prefix": "bucket",
		"body": [
			"template<typename T>",
			"class Bucket {",
				"\tT INF_BC;",
				"\tint n, sqrtN, B;",
				"\tvector<T> val, bucket;",
			"public:",
				"\tBucket(int n_, T INF_BC_=numeric_limits<T>::max()) : Bucket(vector<T>(n_, INF_BC_), INF_BC_) {}",
				"\tBucket(vector<T> a, T INF_BC_=numeric_limits<T>::max()) : n(a.size()), val(a), INF_BC(INF_BC_) {",
					"\t\tsqrtN = ceil(sqrt(n));",
					"\t\tB = (n + sqrtN-1) / sqrtN;",
					"\t\tbucket.resize(B, INF_BC);",
					"\t\tfor (int i=0; i<B; ++i) {",
						"\t\t\tfor (int j=sqrtN*i; j<sqrtN*(i+1); ++j) {",
							"\t\t\t\tif (j >= n) break;",
							"\t\t\t\tbucket[i] = min(bucket[i], val[j]);",
						"\t\t\t}",
					"\t\t}",
				"\t}",
				"\tT find(int l, int r) {",
					"\t\tint L = (l + sqrtN-1) / sqrtN, R = r / sqrtN;",
					"\t\tT res = INF_BC;",
					"\t\tif (L < R) {",
						"\t\t\tfor (int i=l; i<sqrtN*L; ++i) res = min(res, val[i]);",
						"\t\t\tfor (int i=L; i<R; ++i) res = min(res, bucket[i]);",
						"\t\t\tfor (int i=sqrtN*R; i<r; ++i) res = min(res, val[i]);",
					"\t\t}",
					"\t\telse {",
						"\t\t\tfor (int i=l; i<r; ++i) res = min(res, val[i]);",
					"\t\t}",
					"\t\treturn res;",
				"\t}",
				"\tvoid update(int k, T v) {",
					"\t\tval[k] = v;",
					"\t\tint X = k / sqrtN;",
					"\t\tbucket[X] = INF_BC;",
					"\t\tfor (int i=sqrtN*X; i<sqrtN*(X+1); ++i) {",
						"\t\t\tif (i >= n) break;",
						"\t\t\tbucket[X] = min(bucket[X], val[i]);",
					"\t\t}",
				"\t}",
			"};",
			""
		],
		"description": "Sqrt decomposition class for RMQ"
	}
}