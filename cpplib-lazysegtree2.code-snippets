{
	"LazySegmentTree(RSQ)": {
		"scope": "cpp",
		"prefix": "lazysegtree2",
		"body": [
			"template<typename T>",
			"class LazySegmentTree {",
				"\tint n;",
				"\tvector<T> node, lazy;",
			"public:",
				"\tLazySegmentTree(int n_) : LazySegmentTree(vector<T>(n_)) {}",
				"\tLazySegmentTree(vector<T> v) {",
					"\t\tint n_ = v.size();",
					"\t\tn = 1;",
					"\t\twhile (n < n_) n *= 2;",
					"\t\tnode.resize(n*2-1, 0);",
					"\t\tlazy.resize(n*2-1, 0);",
					"\t\tfor (int i=0; i<n_; ++i) node[n+i-1] = v[i];",
					"\t\tfor (int i=n-2; i>=0; --i) node[i] = node[i*2+1] + node[i*2+2];",
				"\t}",
				"\tvoid eval(int k, int l, int r) {",
					"\t\tif (lazy[k] != 0) {",
						"\t\t\tnode[k] += lazy[k];",
						"\t\t\tif (r-l > 1) {",
							"\t\t\t\tlazy[k*2+1] += lazy[k] / 2;",
							"\t\t\t\tlazy[k*2+2] += lazy[k] / 2;",
						"\t\t\t}",
						"\t\t\tlazy[k] = 0;",
					"\t\t}",
				"\t}",
				"\tvoid add(int a, int b, T x, int k=0, int l=0, int r=-1) {",
					"\t\tif (r == -1) r = n;",
					"\t\teval(k, l, r);",
					"\t\tif (b<=l || r<=a) return;",
					"\t\tif (a<=l && r<=b) {",
						"\t\t\tlazy[k] += x * (r-l);",
						"\t\t\teval(k, l, r);",
					"\t\t}",
					"\t\telse {",
						"\t\t\tadd(a, b, x, k*2+1, l, (l+r)/2);",
						"\t\t\tadd(a, b, x, k*2+2, (l+r)/2, r);",
						"\t\t\tnode[k] = node[k*2+1] + node[k*2+2];",
					"\t\t}",
				"\t}",
				"\tT getSum(int a, int b, int k=0, int l=0, int r=-1) {",
					"\t\tif (r == -1) r = n;",
					"\t\teval(k, l, r);",
					"\t\tif (b<=l || r<=a) return 0;",
					"\t\tif (a<=l && r<=b) return node[k];",
					"\t\tT vl = getSum(a, b, k*2+1, l, (l+r)/2);",
					"\t\tT vr = getSum(a, b, k*2+2, (l+r)/2, r);",
					"\t\treturn vl + vr;",
				"\t}",
			"};",
			""
		],
		"description": "Lazy segment tree class for RSQ"
	}
}